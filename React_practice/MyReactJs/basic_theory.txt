1. What is React.js?
React.js is a JavaScript library for building user interfaces (UIs), developed by Facebook. It helps create fast, dynamic, and reusable UI components.

2. Key Features:
-> Component-Based: UI is broken into reusable components.
-> Virtual DOM: Improves performance by updating only changed parts of the UI.
-> JSX (JavaScript XML): A syntax extension that looks like HTML inside JavaScript.
-> One-Way Data Binding: Data flows in one direction, making debugging easier.
-> State Management: Uses useState and useEffect hooks for handling component state.

3. Core Concepts:
🔹 Components: Reusable UI elements (function or class components).
🔹 Props: Data passed from parent to child components.
🔹 State: Internal component data that changes over time.
🔹 Hooks: Functions like useState and useEffect to manage state and side effects.

5. Why Use React?
✔️ Fast Rendering (Virtual DOM)
✔️ Reusable Components
✔️ Strong Community Support
✔️ Easy to Learn & Use

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

# Steps to create react app:- 

1. npm create vite@latest app-name
2. choose react
3. cd app-name
4. npm install 

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

What are Components in React?
-> Definition:
   A component in React is a reusable, independent piece of UI that can be used multiple times in an application. It helps in breaking down a complex UI into smaller, 
   manageable parts.

-> Types of Components:

🔹 Functional Components (Preferred) – Written as JavaScript functions.
🔹 Class Components (Older method) – Written as ES6 classes.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

What is a Fragment in React?
A Fragment in React is a lightweight way to group multiple elements without adding extra HTML nodes to the DOM. It helps improve performance and keeps the markup clean.

Why Use Fragments?
🔹 Avoids unnecessary <div> wrappers.
🔹 Improves performance (no extra DOM nodes).
🔹 Keeps the structure clean.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

# Hooks:- 

useState :- useState is a React Hook used to manage state inside functional components.
	When you call setState (like setCount), React:

        Updates the state (in memory),
        Re-renders the component,
        Updates the Virtual DOM,
        Then React compares (diffs) the new Virtual DOM with the old one,
        And finally updates the real DOM only where needed.

useEffect :- 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

What is Fiber?
React is like a magic painter 🧙‍♂️ that builds your website on the screen. It paints all the parts—buttons, text, pictures, etc.
Before Fiber, this painter used a very old method. If one part of the page changed, it would repaint everything again 😓. That was tiring and slow.
So the React team gave this painter a new way to work, called Fiber!

Fiber is like giving the painter:

Super fast hands 👐

A plan book 📓

And the ability to pause and think 🤔

🏗️ Why was Fiber made?
React wanted to:

Do tasks in small pieces 🧩 (so the site doesn’t freeze)

Pick the most important tasks first 🔥 (like new messages)

Go back and fix mistakes 🔄 (without crashing)

Help add cool new features easily ✨

🧱 How React Worked Before (the "Stack Reconciler")
React used to be like a kid building towers with LEGO 🧒🧱. If one block fell, the whole tower was rebuilt from scratch!

This method:

Did everything in one go (no breaks!)

Couldn’t stop in the middle

Was hard to add smart features

🔄 What is Reconciliation?
Reconciliation is a fancy word for figuring out what changed and updating the screen.

Imagine you drew a flower 🌸. If one petal changes color, React's job is to find that petal and repaint only it, not the whole flower.

Fiber makes this easier and smarter.

🧵 What is a Fiber?
A Fiber is like a small work note 📄 for one part of your screen (like a button or text).
Each Fiber keeps track of:
What it is (button? image?)
What it should look like
What changed
What to do next

All these Fibers are connected like a tree 🌳, where one Fiber points to others (like parent-child).

🕒 Work in Chunks = Time Slicing
Old React: “Do everything now! Don’t stop!”
Fiber React: “Let’s take small steps and rest when needed.”

This is called time slicing ⏳ — it helps React do some work, then wait, then continue. This keeps the app fast and smooth!

🔁 Work Can Be Restarted = Better Mistake Handling
If React finds a mistake, Fiber allows it to:

Cancel the work

Try again from scratch

Without crashing the whole app 😮‍💨

Like when you spill paint and just clean that part without throwing away the whole paper.

🎯 Priorities = Work on Important Things First
Fiber helps React know what’s urgent (like typing) and what can wait (like animating something). It’s like:

Homework due tomorrow? Do it first!
Cleaning your room? Maybe later 😅

🧪 New Features It Enables
With Fiber, React can now support:

Async rendering (do work later if needed)
Suspense (wait for data before showing stuff)
Error boundaries (catch mistakes in one part and continue)

🏁 In Simple Words
React Fiber is:

A new way for React to work smarter
Makes websites faster, smoother, and more flexible
Helps React choose what's important and handle mistakes better

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
